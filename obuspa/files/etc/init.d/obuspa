#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

PROG=/usr/sbin/obuspa
l3device=""
certificate=""
PARAM_FILE="/tmp/obuspa_param_reset.txt"
conn_num=1
mtp_num=1
stomp_num=1

log() {
	echo "${@}"|logger -t obuspa -p debug
}

db_set() {
	if [ -n "${1}" ]; then
		echo "${1} \"${2}\"">>${PARAM_FILE}
	else
		echo >>${PARAM_FILE}
	fi
}

validate_obuspa_section()
{
	uci_validate_section obuspa obuspa "${1}" \
		'enable:bool:true' \
		'cert:string:"/etc/obuspa/rootCA.pem"' \
		'interface:string:wan' \
		'debug:bool:false'
}

validate_controller_section()
{
	uci_validate_section obuspa controller "${1}" \
		'endpointid:string:"self:usp-controller.com"' \
		'enable:bool:true' \
		'AssignedRole:uinteger:1' \
		'PeriodicNotifInterval:uinteger:86400' \
		'PeriodicNotifTime:string:"0001-01-01T00:00:00Z"' \
		'USPRetryMinimumWaitInterval:uinteger:5' \
		'USPRetryIntervalMultiplier:uinteger:2000' \
		'ControllerCode:string' \
		'protocol:or("STOMP","CoAP")' \
		'CoAPHost:string' \
		'CoAPPath:string' \
		'CoAPPort:uinteger'
}

validate_mtp_section()
{
	uci_validate_section obuspa mtp "${1}" \
		'enable:bool:true' \
		'protocol:or("STOMP","CoAP")' \
		'destination:string' \
		'CoAPPath:string' \
		'CoAPPort:uinteger'
}

validate_connection_section()
{
	uci_validate_section obuspa connection "${1}" \
		'host:string:"usp-controller.com"' \
		'username:string:""' \
		'password:string:""' \
		'encryption:bool:true' \
		'enable:bool:true' \
		'port:uinteger:61613' \
		'virtualhost:string:"/"' \
		'EnableHeartbeats:bool:true' \
		'OutgoingHeartbeat:uinteger:30000' \
		'IncomingHeartbeat:uinteger:300000' \
		'ServerRetryInitialInterval:uinteger:60' \
		'ServerRetryIntervalMultiplier:uinteger:2000' \
		'ServerRetryMaxInterval:uinteger:30720'
}

configure_controller() {
	local endpointid enable AssignedRole PeriodicNotifInterval PeriodicNotifTime USPRetryMinimumWaitInterval
	local USPRetryIntervalMultiplier ControllerCode protocol CoAPHost CoAPPath CoAPPort

	validate_controller_section "${1}" || {
		log "Validation of section failed"
		return 1;
	}
	db_set Device.LocalAgent.Controller.${conn_num}.EndpointID "${endpointid}"
	db_set Device.LocalAgent.Controller.${conn_num}.Alias "cpe-${conn_num}"
	db_set Device.LocalAgent.Controller.${conn_num}.Enable "true"
	db_set Device.LocalAgent.Controller.${conn_num}.AssignedRole "Device.LocalAgent.ControllerTrust.Role.${AssignedRole}"
	db_set Device.LocalAgent.Controller.${conn_num}.PeriodicNotifInterval "${PeriodicNotifInterval}"
	db_set Device.LocalAgent.Controller.${conn_num}.PeriodicNotifTime "${PeriodicNotifTime}"
	db_set Device.LocalAgent.Controller.${conn_num}.USPRetryMinimumWaitInterval "${USPRetryMinimumWaitInterval}"
	db_set Device.LocalAgent.Controller.${conn_num}.USPRetryIntervalMultiplier "${USPRetryIntervalMultiplier}"
	db_set Device.LocalAgent.Controller.${conn_num}.ControllerCode "${ControllerCode}"
	db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.Alias "cpe-${conn_num}" 
	db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.Enable "${enable}"
	db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.Protocol "${protocol}"
	if [ "${protocol}"=="STOMP" ]; then
		db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.STOMP.Reference "Device.STOMP.Connection.${conn_num}"
		db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.STOMP.Destination "controller-notify-dest"
	elif [ "${protocol}"=="CoAP" ]; then
		db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.CoAP.Host "${CoAPHost}"
		db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.CoAP.Path "${CoAPPath}"
		db_set Device.LocalAgent.Controller.${conn_num}.MTP.${conn_num}.CoAP.Port "${CoAPPort}"
	else
		log "Unsupported protocol ${protocol}"
	fi
	db_set
	conn_num=$((conn_num+1))
}

configure_mtp() {
	local protocol enable destination CoAPPath CoAPPort

	validate_mtp_section "${1}" || {
		log "Validation of section failed"
		return 1;
	}
	db_set Device.LocalAgent.MTP.${mtp_num}.Alias "cpe-${mtp_num}"
	db_set Device.LocalAgent.MTP.${mtp_num}.Enable "${enable}"
	db_set Device.LocalAgent.MTP.${mtp_num}.Protocol "${protocol}"
	if [ "${protocol}"=="STOMP" ]; then
		db_set Device.LocalAgent.MTP.${mtp_num}.STOMP.Reference "Device.STOMP.Connection.${mtp_num}"
		db_set Device.LocalAgent.MTP.${mtp_num}.STOMP.Destination "${destination}"
	elif [ "${protocol}"=="CoAP" ]; then
		db_set Device.LocalAgent.MTP.${mtp_num}.CoAP.Path "${CoAPPath}"
		db_set Device.LocalAgent.MTP.${mtp_num}.CoAP.Port "${CoAPPort}"
	else
		log "Unsupported protocol ${protocol}"
	fi
	db_set
	mtp_num=$((mtp_num+1))
}

configure_connection() {
	local host username password encryption enable port virtualhost EnableHeartbeats
	local OutgoingHeartbeat IncomingHeartbeat ServerRetryInitialInterval
	local ServerRetryIntervalMultiplier ServerRetryMaxInterval

	validate_connection_section "${1}" || {
		log "Validation of section failed"
		return 1;
	}

	db_set Device.STOMP.Connection.${stomp_num}.Host "${host}"
	db_set Device.STOMP.Connection.${stomp_num}.Username "${username}"
	db_set Device.STOMP.Connection.${stomp_num}.Password "${password}"

	db_set Device.STOMP.Connection.${stomp_num}.Alias "cpe-${stomp_num}"
	db_set Device.STOMP.Connection.${stomp_num}.Enable "${enable}"
	db_set Device.STOMP.Connection.${stomp_num}.Port "${port}"
	db_set Device.STOMP.Connection.${stomp_num}.X_ARRIS-COM_EnableEncryption "${encryption}"
	db_set Device.STOMP.Connection.${stomp_num}.VirtualHost "${virtualhost}"
	db_set Device.STOMP.Connection.${stomp_num}.EnableHeartbeats "${EnableHeartbeats}"
	db_set Device.STOMP.Connection.${stomp_num}.OutgoingHeartbeat "${OutgoingHeartbeat}"
	db_set Device.STOMP.Connection.${stomp_num}.IncomingHeartbeat "${IncomingHeartbeat}"
	db_set Device.STOMP.Connection.${stomp_num}.ServerRetryInitialInterval "${ServerRetryInitialInterval}"
	db_set Device.STOMP.Connection.${stomp_num}.ServerRetryIntervalMultiplier "${ServerRetryIntervalMultiplier}"
	db_set Device.STOMP.Connection.${stomp_num}.ServerRetryMaxInterval "${ServerRetryMaxInterval}"
	db_set
	stomp_num=$((stomp_num+1))
}

configure_obuspa() {
	local enable cert interface debug

	validate_obuspa_section "${1}" || {
		log "Validation of section failed"
		return 1;
	}

	[ ${enable} -eq 0 ] && \
		echo "obuspa not enabled" >>/dev/console && \
		exit

	if [ ${debug} -eq 1 ]; then
		# Forward stdout of the command to logd
		procd_set_param stdout 1
		# Same for stderr
		procd_set_param stderr 1
	fi

	# Get wan L3 interface
	json_load "$(ubus -t 2 call network.interface.${interface} status)"
	json_get_var l3device l3_device
	export USP_BOARD_IFNAME=${l3device}

	# Set this variable for root user
	echo "export USP_BOARD_IFNAME=${l3device}">>/root/.profile

	[ -f $cert ] && certificate=$cert

}
db_init() {
	[ -f ${PARAM_FILE} ] && rm -f ${PARAM_FILE}
	[ -f /tmp/usp.db ] && rm -f /tmp/usp.db

	config_load obuspa
	config_foreach configure_obuspa obuspa
	config_foreach configure_controller controller
	config_foreach configure_connection connection
	config_foreach configure_mtp mtp
	db_set Internal.Reboot.Cause "LocalFactoryReset"
}

start_service() {
	procd_open_instance obuspa
	db_init
	procd_set_param env USP_BOARD_IFNAME=${l3device}
	procd_set_param command ${PROG}
	procd_append_param command -p -v 4 -r ${PARAM_FILE}
	if [ -f "${certificate}" ]; then
		procd_append_param command -t ${certificate}
	fi
	procd_set_param respawn
	procd_close_instance
}

reload_service() {
	stop
	start
}

service_triggers() {
	procd_add_config_trigger "config.change" "obuspa"  /etc/init.d/obuspa restart
}
