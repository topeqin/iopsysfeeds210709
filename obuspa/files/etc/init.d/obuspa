#!/bin/sh /etc/rc.common

START=99
USE_PROCD=1

PROG=/usr/sbin/obuspa
PARAM_FILE="/tmp/obuspa_param_reset.txt"
CONFIGURATION=obuspa
KEEP_FILES="/lib/upgrade/keep.d/obuspa"
USP_TEMP_FILE="/tmp/usp.tmp"
controller_num=0
mtp_num=0
stomp_num=0
mqtt_num=0
subs_num=0
index=0

log() {
	echo "${@}"|logger -t obuspa -p debug
}

db_set() {
	if [ -n "${1}" ]; then
		echo "${1} \"${2}\"">>${PARAM_FILE}
	else
		echo >>${PARAM_FILE}
	fi
}

get_index() {
	index=$(( index + 1 ))
	if [ "$1" = "$2" ]; then
		echo "${index}" > ${USP_TEMP_FILE}
	fi
}

get_uci_ref_index() {
	local val;

	[ -f ${USP_TEMP_FILE} ] && rm -f ${USP_TEMP_FILE}

	index=0
	config_load $CONFIGURATION
	config_foreach get_index $1 $2
	val=$(cat ${USP_TEMP_FILE})

	if [ -z $val ]; then
		val=0
	fi

	rm -f ${USP_TEMP_FILE}

	echo $val
}

validate_obuspa_section()
{
	uci_validate_section ${CONFIGURATION} obuspa "${1}" \
		'enabled:bool:true' \
		'trust_cert:string:/etc/obuspa/rootCA.pem' \
		'client_cert:string:/etc/obuspa/client.pem' \
		'ifname:string:"br-lan"' \
		'debug:bool:false' \
		'log_level:uinteger' \
		'log_dest:string' \
		'db_file:string'
}

validate_localagent_section()
{
	uci_validate_section ${CONFIGURATION} localagent "${1}" \
		'Enable:bool:true' \
		'ParameterName:string:Device.DeviceInfo.SoftwareVersion' \
		'EndpointID:string'
}

validate_controller_section()
{
	uci_validate_section ${CONFIGURATION} controller "${1}" \
		'EndpointID:string' \
		'Enable:bool:true' \
		'AssignedRole:string:Device.LocalAgent.ControllerTrust.Role.1' \
		'PeriodicNotifInterval:uinteger:86400' \
		'PeriodicNotifTime:string' \
		'USPNotifRetryMinimumWaitInterval:uinteger:5' \
		'USPNotifRetryIntervalMultiplier:uinteger:2000' \
		'ControllerCode:string' \
		'Protocol:or("STOMP","CoAP","MQTT")' \
		'Reference:string' \
		'Destination:string:controller-notify-dest' \
		'Topic:string' \
		'coap_host:string' \
		'coap_path:string' \
		'coap_port:uinteger' \
		'mqtt:string' \
		'stomp:string'
}

validate_subscription_section()
{
	uci_validate_section ${CONFIGURATION} subscription "${1}" \
		'Enable:bool:true' \
		'ID:string' \
		'NotifType:string' \
		'ReferenceList:string' \
		'Persistent:bool:true' \
		'Recipient:string' \
		'controller:string'
}

validate_mtp_section()
{
	uci_validate_section ${CONFIGURATION} mtp "${1}" \
		'Enable:bool:true' \
		'Protocol:or("STOMP","CoAP","MQTT")' \
		'Reference:string' \
		'ResponseTopicConfigured:string' \
		'PublishQoS:uinteger' \
		'Destination:string' \
		'coap_path:string' \
		'coap_port:uinteger' \
		'mqtt:string' \
		'stomp:string'
}

validate_stomp_connection_section()
{
	uci_validate_section ${CONFIGURATION} stomp "${1}" \
		'Host:string:usp-controller.com' \
		'Username:string' \
		'Password:string' \
		'encryption:bool:true' \
		'Enable:bool:true' \
		'Port:uinteger:61613' \
		'VirtualHost:string:/' \
		'EnableHeartbeats:bool:true' \
		'OutgoingHeartbeat:uinteger:30000' \
		'IncomingHeartbeat:uinteger:300000' \
		'ServerRetryInitialInterval:uinteger:60' \
		'ServerRetryIntervalMultiplier:uinteger:2000' \
		'ServerRetryMaxInterval:uinteger:30720'
}

validate_mqtt_client_section()
{
	uci_validate_section ${CONFIGURATION} mqtt "${1}" \
		'BrokerAddress:string' \
		'BrokerPort:uinteger:1883' \
		'Enable:bool:true' \
		'Username:string' \
		'Password:string' \
		'ProtocolVersion:string:5.0' \
		'TransportProtocol:string:TCP/IP' \
		'KeepAliveTime:uinteger:60' \
		'ClientID:string' \
		'ConnectRetryTime:uinteger:5' \
		'ConnectRetryIntervalMultiplier:uinteger:2000' \
		'ConnectRetryMaxInterval:uinteger:60'
}

configure_localagent() {
	local Enable ParameterName EndpointID
	local _num

	validate_localagent_section 'localagent' || {
		log "Validation of localagent section failed"
		return 1;
	}

	if [ -n "${EndpointID}" ]; then
		db_set Device.LocalAgent.EndpointID "${EndpointID}"
	fi

	_num=1
	while [ ${_num} -le ${controller_num} ]
	do
		db_set Device.LocalAgent.Controller.${_num}.BootParameter.1.Alias "cpe-1"
		db_set Device.LocalAgent.Controller.${_num}.BootParameter.1.Enable "${Enable}"
		db_set Device.LocalAgent.Controller.${_num}.BootParameter.1.ParameterName "${ParameterName}"
		_num=$(( ${_num} + 1 ))
	done

	db_set
}

configure_controller() {
	local EndpointID Enable AssignedRole PeriodicNotifInterval PeriodicNotifTime USPNotifRetryMinimumWaitInterval
	local USPNotifRetryIntervalMultiplier ControllerCode Protocol Destination coap_host coap_path coap_port
	local Reference Topic mqtt stomp

	validate_controller_section "${1}" || {
		log "Validation of controller section failed"
		return 1;
	}

	if [ -z ${EndpointID} -o -z ${Protocol} ]; then
		log "controller:: EndpointID id and Protocol cannot be empty"
		return 1;
	fi

	if [ -z "${stomp}" -a -z "${Reference}"  -a -z "${mqtt}" -a -z "${coap_path}" ]; then
		log "controller:: Invalid configuration"
		return 1;
	fi

	if [ -z ${Reference} ]; then
		if [ ${Protocol} = "STOMP" ]; then
			val=$(get_uci_ref_index stomp ${stomp})
			if [ ${val} -eq 0 ]; then
				log "Not able to find the referred stomp section"
				return 1;
			fi
			Reference="Device.STOMP.Connection.${val}"
		elif [ ${Protocol} = "MQTT" ]; then
			val=$(get_uci_ref_index mqtt ${mqtt})
			if [ ${val} -eq 0 ]; then
				log "Not able to find the referred mqtt section"
				return 1;
			fi
			Reference="Device.MQTT.Client.${val}"
		fi
	fi

	controller_num=$(( controller_num + 1 ))

	db_set Device.LocalAgent.Controller.${controller_num}.Alias "cpe-${controller_num}"
	db_set Device.LocalAgent.Controller.${controller_num}.Enable "${Enable}"
	db_set Device.LocalAgent.Controller.${controller_num}.EndpointID "${EndpointID}"
	#db_set Device.LocalAgent.Controller.${controller_num}.AssignedRole "${AssignedRole}"
	db_set Device.LocalAgent.Controller.${controller_num}.PeriodicNotifInterval "${PeriodicNotifInterval}"
	db_set Device.LocalAgent.Controller.${controller_num}.PeriodicNotifTime "${PeriodicNotifTime}"
	db_set Device.LocalAgent.Controller.${controller_num}.USPNotifRetryMinimumWaitInterval "${USPNotifRetryMinimumWaitInterval}"
	db_set Device.LocalAgent.Controller.${controller_num}.USPNotifRetryIntervalMultiplier "${USPNotifRetryIntervalMultiplier}"
	db_set Device.LocalAgent.Controller.${controller_num}.ControllerCode "${ControllerCode}"

	db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.Alias "cpe-${controller_num}"
	db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.Enable "${Enable}"
	db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.Protocol "${Protocol}"
	# only support configuration of one mtp path per controller using uci
	if [ "${Protocol}" = "MQTT" ]; then
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.MQTT.Reference "${Reference}"
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.MQTT.Topic "${Topic}"
	elif [ "${Protocol}" = "STOMP" ]; then
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.STOMP.Reference "${Reference}"
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.STOMP.Destination "${Destination}"
	elif [ "${Protocol}" = "CoAP" ]; then
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.CoAP.Host "${coap_host}"
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.CoAP.Path "${coap_path}"
		db_set Device.LocalAgent.Controller.${controller_num}.MTP.1.CoAP.Port "${coap_port}"
	else
		log "Unsupported Protocol ${Protocol}"
	fi

	db_set
}

configure_subscription(){
	local ID Enable NotifType ReferenceList Persistent Recipient
	local controller

	validate_subscription_section "${1}" || {
		log "Validation of subscription section failed"
		return 1;
	}

	if [ -z "${Recipient}" -a -z "${controller}" ]; then
		log "No recipient for subscription"
	fi

	if [ -z ${Recipient} ]; then
		val=$(get_uci_ref_index controller ${controller})
		if [ ${val} -eq 0 ]; then
			log "Not able to find the referred controller section"
				return 1;
		fi
		Recipient="Device.LocalAgent.Controller.${val}"
	fi

	subs_num=$(( subs_num + 1))

	db_set Device.LocalAgent.Subscription.${subs_num}.Alias "cpe-${subs_num}"
	db_set Device.LocalAgent.Subscription.${subs_num}.Enable "${Enable}"
	db_set Device.LocalAgent.Subscription.${subs_num}.ID "${ID}"
	db_set Device.LocalAgent.Subscription.${subs_num}.NotifType "${NotifType}"
	db_set Device.LocalAgent.Subscription.${subs_num}.ReferenceList "${ReferenceList}"
	db_set Device.LocalAgent.Subscription.${subs_num}.Persistent "${Persistent}"
	db_set Device.LocalAgent.Subscription.${subs_num}.Recipient "${Recipient}"
}

configure_mtp() {
	local Enable Protocol Reference ResponseTopicConfigured PublishQoS
	local stomp mqtt

	validate_mtp_section "${1}" || {
		log "Validation of mtp section failed"
		return 1;
	}

	if [ -z ${Reference} ]; then
		if [ ${Protocol} = "STOMP" ]; then
			val=$(get_uci_ref_index stomp ${stomp})
			if [ ${val} -eq 0 ]; then
				log "Referred stomp section not found"
				return 1;
			fi
			Reference="Device.STOMP.Connection.${val}"
		elif [ ${Protocol} = "MQTT" ]; then
			val=$(get_uci_ref_index mqtt ${mqtt})
			if [ ${val} -eq 0 ]; then
				log "Referred mqtt section not found"
				return 1;
			fi
			Reference="Device.MQTT.Client.${val}"
		fi
	fi
	mtp_num=$(( mtp_num + 1 ))

	db_set Device.LocalAgent.MTP.${mtp_num}.Alias "cpe-${mtp_num}"
	db_set Device.LocalAgent.MTP.${mtp_num}.Enable "${Enable}"
	db_set Device.LocalAgent.MTP.${mtp_num}.Protocol "${Protocol}"
	if [ "${Protocol}" = "MQTT" ]; then
		db_set Device.LocalAgent.MTP.${mtp_num}.MQTT.Reference "${Reference}"
		db_set Device.LocalAgent.MTP.${mtp_num}.MQTT.ResponseTopicConfigured "${ResponseTopicConfigured}"
		if [ -n "${PublishQoS}" ]; then
			db_set Device.LocalAgent.MTP.${mtp_num}.MQTT.PublishQoS "${PublishQoS}"
		fi
	elif [ "${Protocol}" = "STOMP" ]; then
		db_set Device.LocalAgent.MTP.${mtp_num}.STOMP.Reference "${Reference}"
		db_set Device.LocalAgent.MTP.${mtp_num}.STOMP.Destination "${Destination}"
	elif [ "${Protocol}" = "CoAP" ]; then
		db_set Device.LocalAgent.MTP.${mtp_num}.CoAP.Path "${coap_path}"
		db_set Device.LocalAgent.MTP.${mtp_num}.CoAP.Port "${coap_port}"
	else
		log "Unsupported Protocol ${Protocol} in mtp"
	fi
	db_set
}

configure_stomp_connection() {
	local Host Username Password Enable Port VirtualHost EnableHeartbeats
	local OutgoingHeartbeat IncomingHeartbeat ServerRetryInitialInterval
	local ServerRetryIntervalMultiplier ServerRetryMaxInterval
	local encryption

	validate_stomp_connection_section "${1}" || {
		log "Validation of stomp section failed"
		return 1;
	}

	stomp_num=$(( stomp_num + 1 ))

	db_set Device.STOMP.Connection.${stomp_num}.Host "${Host}"
	db_set Device.STOMP.Connection.${stomp_num}.Username "${Username}"
	db_set Device.STOMP.Connection.${stomp_num}.Password "${Password}"

	db_set Device.STOMP.Connection.${stomp_num}.Alias "cpe-${stomp_num}"
	db_set Device.STOMP.Connection.${stomp_num}.Enable "${Enable}"
	db_set Device.STOMP.Connection.${stomp_num}.Port "${Port}"
	db_set Device.STOMP.Connection.${stomp_num}.X_ARRIS-COM_EnableEncryption "${encryption}"
	db_set Device.STOMP.Connection.${stomp_num}.VirtualHost "${VirtualHost}"
	db_set Device.STOMP.Connection.${stomp_num}.EnableHeartbeats "${EnableHeartbeats}"
	db_set Device.STOMP.Connection.${stomp_num}.OutgoingHeartbeat "${OutgoingHeartbeat}"
	db_set Device.STOMP.Connection.${stomp_num}.IncomingHeartbeat "${IncomingHeartbeat}"
	db_set Device.STOMP.Connection.${stomp_num}.ServerRetryInitialInterval "${ServerRetryInitialInterval}"
	db_set Device.STOMP.Connection.${stomp_num}.ServerRetryIntervalMultiplier "${ServerRetryIntervalMultiplier}"
	db_set Device.STOMP.Connection.${stomp_num}.ServerRetryMaxInterval "${ServerRetryMaxInterval}"
	db_set
}

configure_mqtt_client(){
	local BrokerAddress BrokerPort Enable Username Password ProtocolVersion KeepAliveTime
	local TransportProtocol ConnectRetryTime ConnectRetryMaxInterval ConnectRetryIntervalMultiplier

	validate_mqtt_client_section "${1}" || {
		log "Validation of mqtt section failed"
		return 1;
	}

	if [ -z "${BrokerAddress}" ]; then
		log "Broker address can not be empty for mqtt"
		return 1;
	fi

	mqtt_num=$(( mqtt_num + 1 ))

	db_set Device.MQTT.Client.${mqtt_num}.Alias "cpe-${mqtt_num}"
	db_set Device.MQTT.Client.${mqtt_num}.Enable "${Enable}"
	db_set Device.MQTT.Client.${mqtt_num}.BrokerAddress "${BrokerAddress}"
	db_set Device.MQTT.Client.${mqtt_num}.BrokerPort "${BrokerPort}"
	db_set Device.MQTT.Client.${mqtt_num}.Username "${Username}"
	db_set Device.MQTT.Client.${mqtt_num}.Password "${Password}"
	db_set Device.MQTT.Client.${mqtt_num}.ProtocolVersion "${ProtocolVersion}"
	db_set Device.MQTT.Client.${mqtt_num}.TransportProtocol "${TransportProtocol}"
	db_set Device.MQTT.Client.${mqtt_num}.KeepAliveTime "${KeepAliveTime}"
	db_set Device.MQTT.Client.${mqtt_num}.ClientID "${ClientID}"
	db_set Device.MQTT.Client.${mqtt_num}.ConnectRetryTime "${ConnectRetryTime}"
	db_set Device.MQTT.Client.${mqtt_num}.ConnectRetryIntervalMultiplier "${ConnectRetryIntervalMultiplier}"
	db_set Device.MQTT.Client.${mqtt_num}.ConnectRetryMaxInterval "${ConnectRetryMaxInterval}"

	db_set
}


configure_obuspa() {
	local enabled trust_cert ifname debug log_level db_file log_dest

	validate_obuspa_section "global" || {
		log "Validation of global section failed"
		return 1;
	}

	[ ${enabled} -eq 0 ] && exit 0

	if [ ${debug} -eq 1 ]; then
		# Forward stdout of the command to logd
		procd_set_param stdout 1
		# Same for stderr
		procd_set_param stderr 1
		procd_append_param command -p
	fi

	if [ -n ${log_level}]; then
		procd_append_param command -v ${log_level}
	fi

	if [ -n "${log_dest}" ]; then
		procd_append_param command -l ${log_dest}
	fi

	# Set this variable for root user and obuspa -c tool
	grep -q "export USP_BOARD_IFNAME=${ifname}" /root/.profile || \
		echo "export USP_BOARD_IFNAME=${ifname}" >> /root/.profile

	if [ -n "${db_file}" ]; then
		echo "${db_file}" >>${KEEP_FILES}
		if [ -f "${db_file}" ]; then
			procd_append_param command -f ${db_file}
		fi
	fi

	if [ -n "${trust_cert}" ]; then
		echo "${trust_cert}" >>${KEEP_FILES}
		if [ -f "${trust_cert}" ]; then
			procd_append_param command -t ${trust_cert}
		fi
	fi

	if [ -n "${client_cert}" ]; then
		echo "${client_cert}" >>${KEEP_FILES}
		if [ -f "${client_cert}" ]; then
			procd_append_param command -a ${client_cert}
		fi
	fi

	procd_set_param env USP_BOARD_IFNAME=${ifname}
}

# Create factory reset file
db_init() {
	[ -f ${PARAM_FILE} ] && rm -f ${PARAM_FILE}
	[ -f /tmp/usp.db ] && rm -f /tmp/usp.db
	[ -f ${KEEP_FILES} ] && rm -f ${KEEP_FILES}

	# Load configuration
	config_load $CONFIGURATION
	config_foreach configure_obuspa obuspa
	config_foreach configure_controller controller
	config_foreach configure_localagent localagent
	config_foreach configure_mtp mtp
	config_foreach configure_stomp_connection stomp
	config_foreach configure_mqtt_client mqtt
	config_foreach configure_subscription subscription

	db_set Internal.Reboot.Cause "LocalFactoryReset"
}

start_service() {
	procd_open_instance ${CONFIGURATION}
	procd_set_param command ${PROG}
	db_init
	procd_append_param command -r ${PARAM_FILE}
	procd_set_param respawn \
			${respawn_threshold:-5} \
			${respawn_timeout:-10} ${respawn_retry:-3}
	procd_close_instance
}

stop_service() {
	${PROG} -c stop 2>&1 >/dev/null
}

reload_service() {
	stop
	start
}

service_triggers() {
	procd_add_reload_trigger "${CONFIGURATION}" "uspd"
}
