#!/bin/sh
#
# This program is intended to be run in a chroot environment where the old system
# is mounted in /tmp/oldroot
#


###############################################################################
# Global variables. can be used directly in any function called.


###############################################################################
# file local variables. should not be used in imported functions. Can be used
# by functions declared in this script
upd_forceboot=0
log_stdout=1		# set to 0 to prevent the log to also print to stdout
upd_keepconfig=0	# set this to keep the current configuration.

###############################################################################
# import external functions

source /lib/upgrade/iopsys.sh
[ -f /lib/upgrade/iopupgrade ] && source /lib/upgrade/iopupgrade


# only call function if it exists
function_call() {
	if [ -n "$1" ] && type "$1" 2>/dev/null >/dev/null
	then
		$1 "$@" || exit
	fi
}
# Cleanup and error handling functions.
function log {
	TIME=$(date)
	[ $log_stdout -eq 1 ] && echo "$@"
	echo "[$TIME] $@" >>/root/upd_log
}


while getopts "hbc" opt; do
	case $opt in
		h)
			upd_usage
			exit 1
			;;
		c)
			upd_keepconfig=1
			;;
		b)
			upd_forceboot=1
			;;
		\?)
			echo "Invalid option: -$OPTARG" >&2
			exit 1
			;;
	esac
done

# copy old install log over
cp /tmp/oldroot/tmp/upd_log /root/upd_log

# Upgrade boot loader if needed.
function_call upd_program_boot

# Let the new upgrade do whatever it needs,
# such as configuration migration etc.
if [ $upd_keepconfig -eq 1 -a -x /lib/upgrade/post-rootfs-fixup ]; then
	(/lib/upgrade/post-rootfs-fixup) || exit
fi

