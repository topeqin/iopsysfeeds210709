#!/bin/sh

. /usr/share/libubox/jshn.sh
. /lib/functions.sh

get_creds() {
	local section=$1
	local network=$2
	local net dev ssid key encryption band
	config_get net $section "network"
	if [ "$net" == "$network" ]; then
		json_add_object
		config_get dev $section "device"
		band="$(uci -q get wireless.$dev.band)"
		config_get ssid $section ssid
		config_get key $section key
		config_get encryption $section encryption
		[ "$ssid" == "" -o "$band" == "" ] && return
		json_add_string "ssid" "$ssid"
		json_add_string "band" "$band"
		json_add_string "key" "$key"
		json_add_string "encryption" "$encryption"
		json_close_object
	fi
}

validate_file() {
	local file="$1"
	local real="$(readlink -f `dirname $file`)"
	real="${real}/`basename $file`"
	echo "$real" >>/tmp/uci.dbg
	case "$real" in
		/tmp/*)
			touch $real && return 0 || return 1
		;;
		*)
			return 1
		;;
	esac
}

write_error(){
	json_init
	json_add_string "status" "error: $1"
	json_dump
	exit 1
}

get_wifi_device_from_band(){
	local section="$1"
	local band="$2"
	local __ret="$3"
	local b
	config_get b $section "band"
	if [ "$band" == "$b" ]; then
		eval "export -- \"$__ret=$section\""
	fi
}

get_device(){
	local band="$1"
	config_foreach get_wifi_device_from_band "wifi-device" "$band" "$2"
}

count_wifi_ifaces() {
	local section="$1"
	local dev="$2"
	local __ret="$3"
	local device mode
	config_get device "$section" "device"
	config_get mode "$section" "mode"
	if [ "$device" == "$dev" -a "$mode" == "ap" ]; then
		eval "export -- \"$__ret=$((__ret+1))\""
	fi
}

get_amount_of_ifaces() {
	local band="$1"
	local __ret=$2
	config_load "wireless"
	get_device "$band" dev
	[ "$dev" == "" ] && exit 1
	config_foreach count_wifi_ifaces "wifi-iface" "$dev" "$__ret"
}


set_wireless_values() {
	local iface_num="$1"
	local ssid="$2"
	local key="$3"
	local encryption="$4"
	local band="$5"
	local dev
	get_device "$band" dev
	if ! uci -q get wireless.@wifi-iface[$iface_num] >/dev/null 2>&1; then
		uci add wireless wifi-iface >/dev/null 2>&1
	fi
	#TODO: get network dynamicaly
	uci set wireless.@wifi-iface[$iface_num].network="wan"
	uci set wireless.@wifi-iface[$iface_num].mode="ap"
	uci set wireless.@wifi-iface[$iface_num].ssid="$ssid"
	uci set wireless.@wifi-iface[$iface_num].device="$dev"
	uci set wireless.@wifi-iface[$iface_num].key="$key"
	uci set wireless.@wifi-iface[$iface_num].encryption="$encryption"
}

clean_wifi_ifaces() {
	index=$1
	while uci -q get wireless.@wifi-iface[$index] >/dev/null 2>&1; do
		while [ "$(uci -q get wireless.@wifi-iface[$index].mode)" != "ap" ]; do
			index=$((index+1))
		done
		uci -q delete wireless.@wifi-iface[$index]
	done
}

case "$1" in
	list)
		echo '{ "extract_creds": { "network": "str", "file": "str" }, "set_down_creds": { "file": "str" } }'
	;;
	call)
		case "$2" in
			extract_creds)
				#TODO: if not routed exit
				local curmode="$(uci -q get netmode.setup.curmode)"
				case $curmode in
					*repeater*);;
					*) write_error "not in repeater mode";;
				esac
				local network file input
				read input
				json_load $input
				json_get_var network network
				json_get_var file file

				json_init
				json_add_array "wifi-ifaces"
				config_load wireless
				config_foreach get_creds "wifi-iface" "$network"
				json_close_array

				if [ "$file" == "" ]; then
					json_dump
				else
					validate_file $file && json_dump -i >$file || write_error "invalid filename (\"$file\"), file must be in /tmp/ and in an existing directory"
				fi
				json_init
				json_add_string "status" success
				json_dump
			;;
			set_down_creds)
				local file
				read input
				json_load $input
				json_get_var file file
				validate_file "$file" || write_error "invalid filename (\"$file\"), file must be in /tmp and exist"
				json_load "`cat $file`" || write_error "invalid file content"
				json_select "wifi_ifaces" || write_error "invalid file content"
				get_amount_of_ifaces "a" amount_a
				get_amount_of_ifaces "b" amount_b
				i=1
				local wifi_iface_num=0
				clean_wifi_ifaces $wifi_iface_num
				local dummy
				while json_get_var dummy $i; do
					local num_ifaces
					json_select $i
					json_get_var band band
					json_get_var ssid ssid
					json_get_var key key
					json_get_var encryption encryption
					[ "$ssid" == "" ] && {
						i=$((i+1))
						continue
					}
					case $band in
						a)
							amount_a=$((amount_a-1))
							;;
						b)
							amount_b=$((amount_b-1))
							;;
						*)
							write_error "unknown_error"
					esac
					#skip ifaces not in ap mode
					while uci -q get wireless.@wifi-iface[$wifi_iface_num] >/dev/null &&
							[ "$(uci -q get wireless.@wifi-iface[$wifi_iface_num].mode)" != "ap" ]; do
						wifi_iface_num=$((wifi_iface_num+1))
					done
					set_wireless_values $wifi_iface_num "$ssid" "$key" "$encryption" "$band"
					wifi_iface_num=$((wifi_iface_num+1))
					json_select ..
					i=$((i+1))
				done
				uci commit wireless
				json_select ..
				if [ $amount_a -ne 0 -o $amount_b -ne 0 ]; then
					/sbin/wifi apply &
				else
					/sbin/wifi reload nodat >/dev/null 2>&1 &
				fi
				pidof wifi >/dev/null 2>&1 && write_error "wifi script already running"
				json_init
				json_add_string "status" "success"
				json_dump
			;;
		esac
	;;
esac
