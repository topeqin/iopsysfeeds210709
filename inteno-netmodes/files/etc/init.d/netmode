#!/bin/sh /etc/rc.common

START=10
USE_PROCD=1

TMPDIR=/var/netmodes
OLD_MODE_FILE=/var/netmodes/old_mode

. /usr/share/libubox/jshn.sh
. /lib/network/config.sh

local modedir=$(uci -q get netmode.setup.dir)
[ -n "$modedir" ] || modedir="/etc/netmodes"

get_device() {
	local PORT_NAMES=$(db get hw.board.ethernetPortNames)
	local PORT_ORDER=$(db get hw.board.ethernetPortOrder)
        local cnt=1
        local idx=0

	local pnum=$(echo $PORT_NAMES | wc -w)

	if [ $pnum -le 2 ]; then
		PORT_NAMES=$(echo $PORT_NAMES | sed 's/LAN/LAN1/g')
	fi

	# get index of interface name
	for i in $PORT_NAMES; do
		if [ "$i" == "$1" ]; then
			idx=$cnt
		fi
		cnt=$((cnt+1))
	done

        # get port name from index
	cnt=1
	for i in $PORT_ORDER; do
		if [ "$cnt" == "$idx" ]; then
			echo $i
		fi
		cnt=$((cnt+1))
	done
}

populate_netmodes() {
	[ -f /etc/config/netmode -a -d $modedir ] || return
	local curmode

	config_load netmode

	config_get curmode setup curmode

	mkdir -p $TMPDIR

	if [ "$curmode" == "routed" ]; then
		local hw="$(db -q get hw.board.hardware)"
		if [ "$hw" == "EX400" ]; then
			curmode="routed_mtk"
		else
			curmode="routed_brcm"
		fi
	fi

	echo $curmode > $OLD_MODE_FILE

	delete_netmode() {
		uci delete netmode.$1
	}

	config_foreach delete_netmode netmode
	uci commit netmode

	wan=$(get_device WAN)
	lan1=$(get_device LAN1)
	lan2=$(get_device LAN2)
	lan3=$(get_device LAN3)
	lan4=$(get_device LAN4)
	lan5=$(get_device LAN5)

	for file in $(find $modedir -type f); do
		conf="$(echo $file | cut -d'/' -f5)"
		if [ "$conf" == "layer2_interface_ethernet" ]; then
			grep -q "\$WAN" $file && sed -i "s/\$WAN/$wan/g" $file
		fi
		if [ "$conf" == "network" ]; then
			grep -q "\$WAN" $file && sed -i "s/\$WAN/$wan/g" $file
			grep -q "\$LAN1" $file && sed -i "s/\$LAN1/$lan1/g" $file
			grep -q "\$LAN2" $file && sed -i "s/\$LAN2/$lan2/g" $file
			grep -q "\$LAN3" $file && sed -i "s/\$LAN3/$lan3/g" $file
			grep -q "\$LAN4" $file && sed -i "s/\$LAN4/$lan4/g" $file

			ifname="$(uci -q get $file.wan.ifname | sed 's/[ \t]*$//')"
			uci -q set $file.wan.ifname="$ifname"
			uci -q commit $file
		fi
	done

	local hardware=$(db get hw.board.hardware)
	local keys lang desc exp exclude
	for mode in $(ls $modedir); do

			case "$mode" in
				repeater*)
					wlctl -i wl1 ap >/dev/null 2>&1 || ifconfig rai0 2>/dev/null | grep -q rai0 || continue
				;;
			esac

			lang=""
			desc=""
			exp=""
			uci -q set netmode.$mode=netmode
			json_load "$(cat $modedir/$mode/DETAILS)"

			if json_select excluded_boards; then
				exclude=0
				_i=1
				while json_get_var board $_i; do
					case "$hardware" in
						$board)
							uci -q delete netmode.$mode
							exclude=1
							break
						;;
					esac
					_i=$((_i+1))
				done
				json_select ..
				[ $exclude -eq 1 ] && continue
			fi

			if json_select acl; then
				_i=1
				while json_get_var user $_i; do
					uci add_list netmode.$mode._access_r="$user"
					_i=$((_i+1))
				done
				json_select ..
			fi

			json_select description
			json_get_keys keys
			for k in $keys; do
				json_get_keys lang $k
				lang=$(echo $lang | sed 's/^[ \t]*//;s/[ \t]*$//')
				json_select $k
				json_get_var desc $lang
				uci -q set netmode.$mode."desc_$lang"="$desc"
				[ "$lang" == "en" ] && uci -q set netmode.$mode."desc"="$desc"
				json_select ..
			done
			json_select ..

			json_select explanation
			json_get_keys keys
			for k in $keys; do
				json_get_keys lang $k
				lang=$(echo $lang | sed 's/^[ \t]*//;s/[ \t]*$//')
				json_select $k
				json_get_var exp $lang
				uci -q set netmode.$mode."exp_$lang"="$exp"
				[ "$lang" == "en" ] && uci -q set netmode.$mode."exp"="$exp"
				json_select ..
			done
			json_select ..

			json_get_var cred credentials
			uci -q set netmode.$mode.askcred="$cred"
			json_get_var ulb uplink_band
			uci -q set netmode.$mode.uplink_band="$ulb"
			json_get_var reboot reboot
			uci -q set netmode.$mode.reboot="$reboot"
	done

	config_get curmode setup curmode
	[ -d /etc/netmodes/$curmode ] || {
		[ "$(db -q get hw.board.hardware)" == "EX400" ] && uci -q set netmode.setup.curmode="routed_mtk" || uci -q set netmode.setup.curmode="routed_brcm"
	}

	uci commit netmode
}

switch_netmode() {
	[ -f /etc/config/netmode -a -d $modedir ] || return

	local netreload="$1"
	local curmode conf repeaterready old_mode

	config_load netmode

	config_get curmode setup curmode

	config_get repeaterready setup repeaterready "0"
	if [ "$repeaterready" == "1" ] ; then
		uci -q set netmode.setup.repeaterready="0"
		uci commit netmode
	fi

	if [ "$curmode" == "repeater" ]; then
		local hw="$(db -q get hw.board.hardware)"
		if [ "$hw" == "EX400" ]; then
			curmode="repeater_mtk_5g_up_dual_down"
		else
			curmode="repeater_brcm_2g_up_dual_down"
		fi
		uci set netmode.setup.curmode="$curmode"
		uci commit netmode
	fi
	if [ "$curmode" == "routed" ]; then
		local hw="$(db -q get hw.board.hardware)"
		if [ "$hw" == "EX400" ]; then
			curmode="routed_mtk"
		else
			curmode="routed_brcm"
		fi
		uci set netmode.setup.curmode="$curmode"
		uci commit netmode
	fi

	old_mode=`cat $OLD_MODE_FILE 2>/dev/null`

        # if curmode has not changed do not copy configs
        if [ "$curmode" == "$old_mode" ]; then
                /etc/init.d/enviroment reload
                return
        fi

        echo $curmode >$OLD_MODE_FILE

	[ -d "/etc/netmodes/$curmode" ] || return
	cp /etc/netmodes/$curmode/* /etc/config/
	rm -f /etc/config/DETAILS
	sync
	local reboot=$(uci -q get netmode.$curmode.reboot)
	local askcred=$(uci -q get netmode.$curmode.askcred)
	if [ "$reboot" == "0" ]; then
		/etc/init.d/enviroment reload
		case "$curmode" in
			routed*)
				ubus call uci commit '{"config":"network"}'
			;;
			repeater*)
				if [ -f /etc/init.d/omcproxy ]; then
					/etc/init.d/omcproxy stop
				fi
				if [ "$netreload" != "0" ]; then
					ubus call uci commit '{"config":"network"}'
				fi
			;;
		esac
	else
		reboot &
	fi
}

start_client_listener() {
	local curmode repeaterready ulcpid

	config_load netmode
	config_get repeaterready setup repeaterready 0

	ulcpid=$(ps | grep "ubus listen client" | grep -v grep | awk '{print$1}')

	[ $repeaterready -eq 1 ] && {
		killall -SIGKILL netmode-client-detect >/dev/null 2>&1
		kill -9 $ulcpid >/dev/null 2>&1
		return
	}

	config_get curmode setup curmode

	case "$curmode" in
		repeater*)
			killall -SIGKILL netmode-client-detect >/dev/null 2>&1
			kill -9 $ulcpid >/dev/null 2>&1
		;;
		*)
			pidof netmode-client-detect || /sbin/netmode-client-detect &
		;;
	esac
}

start_netmode_discover() {
	local curmode repeaterready

	killall -9 netmode-discover >/dev/null 2>&1

	config_load netmode
	config_get repeaterready setup repeaterready 0

	[ $repeaterready -eq 1 ] && return

	config_get curmode setup curmode

	case "$curmode" in
		repeater*)
			/sbin/netmode-discover &
		;;
	esac
}

start_service() {
	populate_netmodes
	start_client_listener
	start_netmode_discover
}

reload_service() {
        switch_netmode "$1"

	# set default JUCI page to overview
	uci -q set juci.juci.homepage="overview"
	uci commit juci

	start_client_listener
	start_netmode_discover
}

stop_service() {
	killall -SIGKILL netmode-client-detect >/dev/null 2>&1
	killall -9 netmode-discover >/dev/null 2>&1
}

service_triggers()
{
	procd_add_reload_trigger netmode
}

